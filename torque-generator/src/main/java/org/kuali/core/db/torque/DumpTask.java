package org.kuali.core.db.torque;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.Properties;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.tools.ant.Task;
import org.apache.torque.engine.platform.Platform;
import org.kuali.db.ConnectionHandler;
import org.kuali.db.Credentials;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DumpTask extends Task {

	private static final Logger logger = LoggerFactory.getLogger(DumpTask.class);

	Utils utils = new Utils();

	ConnectionHandler connectionHandler = new ConnectionHandler();

	boolean antCompatibilityMode;

	protected void showConfiguration() {
		logger.info("Schema: " + schema);
		logger.info("Artifact Id: " + artifactId);
		logger.info("Database Vendor: " + getTargetDatabase());
		if (getEncoding() == null) {
			logger.info("Encoding: " + System.getProperty("file.encoding"));
		} else {
			logger.info("Encoding: " + getEncoding());
		}
	}

	protected void updateConfiguration(Platform platform) {
		if (StringUtils.isEmpty(schema)) {
			schema = platform.getSchemaName(artifactId);
		}
		if (StringUtils.isEmpty(username)) {
			username = schema;
		}
		if (StringUtils.isEmpty(password)) {
			password = schema;
		}
	}

	protected Connection getConnection() throws SQLException {
		try {
			BeanUtils.copyProperties(connectionHandler, this);
		} catch (Exception e) {
			throw new SQLException("Error copying properties", e);
		}
		Credentials credentials = new Credentials(username, password);
		connectionHandler.setCredentials(credentials);
		return connectionHandler.getConnection();
	}

	protected void doFilter(Collection<String> elements, List<String> includes, List<String> excludes, String label) {
		logger.info("Found {} {}", elements.size(), label);
		StringFilter filterer = new StringFilter(includes, excludes);
		filterer.filter(elements.iterator());
		logger.info("Processing {} {} after filtering is applied", elements.size(), label);
	}

	/**
	 * This is the maven concept of an artifactId
	 */
	String artifactId;

	/**
	 * The encoding to use
	 */
	String encoding;

	List<String> tableIncludes;
	List<String> tableExcludes;

	List<String> viewIncludes;
	List<String> viewExcludes;

	List<String> sequenceIncludes;
	List<String> sequenceExcludes;

	/**
	 * This is the "autogenerated by" comment in the XML
	 */
	String comment;

	/**
	 * JDBC URL.
	 */
	String url;

	/**
	 * JDBC driver.
	 */
	String driver;

	/**
	 * Additional properties for the JDBC driver
	 */
	Properties driverProperties;

	/**
	 * JDBC user name.
	 */
	String username;

	/**
	 * JDBC password.
	 */
	String password;

	/**
	 * DB schema to use.
	 */
	String schema;

	/**
	 * The type of database eg oracle, mysql etc
	 */
	String targetDatabase;

	public String getEncoding() {
		return encoding;
	}

	public void setEncoding(String encoding) {
		this.encoding = encoding;
	}

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public String getDriver() {
		return driver;
	}

	public void setDriver(String driver) {
		this.driver = driver;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getSchema() {
		return schema;
	}

	public void setSchema(String schema) {
		this.schema = schema;
	}

	public String getTargetDatabase() {
		return targetDatabase;
	}

	public void setTargetDatabase(String targetDatabase) {
		this.targetDatabase = targetDatabase;
	}

	public ConnectionHandler getConnectionHandler() {
		return connectionHandler;
	}

	public void setConnectionHandler(ConnectionHandler connectionHandler) {
		this.connectionHandler = connectionHandler;
	}

	public String getArtifactId() {
		return artifactId;
	}

	public void setArtifactId(String artifactId) {
		this.artifactId = artifactId;
	}

	public boolean isAntCompatibilityMode() {
		return antCompatibilityMode;
	}

	public void setAntCompatibilityMode(boolean antCompatibilityMode) {
		this.antCompatibilityMode = antCompatibilityMode;
	}

	public Properties getDriverProperties() {
		return driverProperties;
	}

	public void setDriverProperties(Properties driverProperties) {
		this.driverProperties = driverProperties;
	}

	public List<String> getTableIncludes() {
		return tableIncludes;
	}

	public void setTableIncludes(List<String> tableIncludes) {
		this.tableIncludes = tableIncludes;
	}

	public List<String> getTableExcludes() {
		return tableExcludes;
	}

	public void setTableExcludes(List<String> tableExcludes) {
		this.tableExcludes = tableExcludes;
	}

	public List<String> getViewIncludes() {
		return viewIncludes;
	}

	public void setViewIncludes(List<String> viewIncludes) {
		this.viewIncludes = viewIncludes;
	}

	public List<String> getViewExcludes() {
		return viewExcludes;
	}

	public void setViewExcludes(List<String> viewExcludes) {
		this.viewExcludes = viewExcludes;
	}

	public List<String> getSequenceIncludes() {
		return sequenceIncludes;
	}

	public void setSequenceIncludes(List<String> sequenceIncludes) {
		this.sequenceIncludes = sequenceIncludes;
	}

	public List<String> getSequenceExcludes() {
		return sequenceExcludes;
	}

	public void setSequenceExcludes(List<String> sequenceExcludes) {
		this.sequenceExcludes = sequenceExcludes;
	}

}
