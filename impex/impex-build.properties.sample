# -------------------------------------------------------------------
#
#  D A T A B A S E  S E T T I N G S
#
# -------------------------------------------------------------------
# JDBC connection settings. This is used by the JDBCToXML task that
# will create an XML database schema from JDBC metadata. These
# settings are also used by the SQL Ant task to initialize your
# Torque system with the generated SQL.
#
# sameJavaName
#   If true, the JDBC task will set the javaName attribute for the tables
#   and columns to be the same as SQL name.
# -------------------------------------------------------------------

torque.project = kfs
#
# the module and tag to check out from SVN for satellite updates
# these are to be used by a Satellite DBA for automating the refresh of the database
#
# these values are for a Kuali client rice base database 
svnroot=https://test.kuali.org/svn/
svn.module=rice-cfg-dbs
# use this Rice source for running with an embedded rice database (normal for development)
svn.base=rice-kuali-client-db/branches/rice-release-1-0-1-1-br/

torque.schema.dir=../../${svn.module}
torque.sql.dir=${torque.schema.dir}/sql

# then, to overlay a KFS/KC/KS database on the base rice database, use the parameters below
# If these parameters are commented out, the impex process will only use the information above 
svnroot.2=https://test.kuali.org/svn/
svn.module.2=kfs-cfg-dbs
svn.base.2=trunk
torque.schema.dir.2=../../${svn.module.2}
torque.sql.dir.2=${torque.schema.dir.2}/sql

#
# You only need to edit these if you are exporting the database to XML
#
export.torque.database = oracle
export.torque.database.driver = oracle.jdbc.OracleDriver
export.torque.database.url = jdbc:oracle:thin:@localhost:1521:XE
export.torque.database.user=kuldba
export.torque.database.schema=KULDBA
export.torque.database.password=kuldba

# A single regex pattern which indicates the table objects to export
#export.table.name.filter=

# A list of regex patterns whose data should not be exported
#export.excluded.tables=KRSB_MSG_PYLD_T,KRNS_LOOKUP_RSLT_T,KRIM_PND.*,.*_MT,KRSB_MSG_QUE_T,KRSB_SVC_DEF_T

# If an import was interrupted during the data export, you can use this
# property to restart the export from a given point
# export.start.table=


#
# Modify these to match the database into which you are going to import
#

import.torque.database = oracle
import.torque.database.driver = oracle.jdbc.OracleDriver
import.torque.database.url = jdbc:oracle:thin:@localhost:1521:XE
import.torque.database.user=kuldemo
import.torque.database.schema=KULDEMO
import.torque.database.password=kuldemo

#
# Uncomment these for a local MySQL database
#
#import.torque.database = mysql
#import.torque.database.driver = com.mysql.jdbc.Driver
#import.torque.database.url = jdbc:mysql://localhost:3306/kuldemo
#import.torque.database.user=kuldemo
#import.torque.database.schema=kuldemo
#import.torque.database.password=kuldemo

# uncomment this to skip some of the larger (and mostly unnecessary) tables in the system
# import.exclude.data.pattern=LD_LDGR_ENTR_T.xml,GL_BALANCE_T.xml,GL_ENTRY_T.xml,LD_LDGR_BAL_T.xml,GL_ACCT_BALANCES_T.xml


# set if you want to use the ant script to set up the users and schemas for the import
# see build.properties for the commands that will be executed

# sample for oracle:
import.admin.user=kuluser_admin
import.admin.password=kuluser_admin

# sample for mysql:
#import.admin.user=root
#import.admin.password=????

# this may need to be different if (like in the case of MySQL) there is a schema name on the URL
# admin commands will not run with that URL if the schema has not yet been created
import.admin.url = ${import.torque.database.url}
# if using MySQL, you will need to remove the schema/database name from the end as below
#import.admin.url=jdbc:mysql://localhost:3306

# these are used by the bootstrapping mechanism on Oracle databases only
oracle.usermaint.user=kulusermaint
oracle.usermaint.password=kulusermaint


