function check_args {
  check_not_blank FILENAME $FILENAME
  check_not_blank ACCESS_KEY $ACCESS_KEY
  check_not_blank SECRET_KEY $SECRET_KEY
  check_not_blank BUCKET $BUCKET
  check_not_blank KEY $KEY
}

MY_DIR="$( cd "$( dirname "$0" )" && pwd )"
ME=$(basename $0)
source $MY_DIR/../common/functions.sh

usage() { echo "Usage: $ME [-q --quiet] [-h --help] filename access_key secret_key bucket key" 1>&2; exit 1; }

QUIET=false
ARGS=$(getopt --options hq --longoptions "help,quiet" --name "$ME" -- "$@");
if [ $? -ne 0 ]; then usage; fi
eval set -- "$ARGS";
while true; do
  case "$1" in
    -h|--help)
      usage;
      shift;
      ;;
    -q|--quiet)
      QUIET=true;
      shift;
      ;;
    --)
      shift;
      break;
      ;;
  esac
done


FILENAME=$1
ACCESS_KEY=$2
SECRET_KEY=$3
BUCKET=$4
KEY=$5

check_args

# expire things 15 minutes from now
EXPIRES=$(date +%s)
EXPIRES=$(($EXPIRES + 900))

# openssl return hmacsha1 with a prefix "(stdin)= 0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33"
# the sed call at the end, strips that off
# the hmacsha1 function from functions.sh isn't working (suspect that the \n confuses things)
HMACSHA1=$(echo -e -n "GET\n\n\n$EXPIRES\n/$BUCKET/$KEY" | openssl sha1 -hmac $SECRET_KEY | sed "s/^.* //")

# convert the hex to base64
SIGNATURE=$(hex2base64 $HMACSHA1)

# setup a url that downloads the correct file 
URL="https://$BUCKET.s3.amazonaws.com/$KEY"

# make the curl call, failing if things go wrong and automatically creating any non-existent dirs on the local file system
execute_quietly "curl --create-dirs --fail --get --data Expires=$EXPIRES --data AWSAccessKeyId=$ACCESS_KEY --data-urlencode Signature=$SIGNATURE --output $FILENAME $URL"


