#!/bin/bash
#
# Copyright 2004-2014 The Kuali Foundation
#
# Licensed under the Educational Community License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.opensource.org/licenses/ecl2.php
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function install_jenkins {
  
  echo "install   -> jenkins:$JENKINS_VERSION"
  
  GROUP_ID=org.jenkins
  ARTIFACT_ID=jenkins
  VERSION=$JENKINS_VERSION
  TYPE=war
  JENKINS_URL=http://mirrors.jenkins-ci.org/war-stable/$JENKINS_VERSION/jenkins.war
  
  $MY_DIR/../common/m2downloadurl $QUIET_FLAG $JENKINS_URL $GROUP_ID $ARTIFACT_ID $VERSION --type=$TYPE
  M2_LOCAL_PATH=$($MY_DIR/../common/m2path $GROUP_ID $ARTIFACT_ID $VERSION --type="$TYPE")
  
  TOMCAT_DIR=/var/lib/$TOMCAT
  TOMCAT_CLEANUP=/usr/share/$TOMCAT/bin/cleanup.sh
  TOMCAT_WEBAPPS=$TOMCAT_DIR/webapps
  TOMCAT_ROOT=$TOMCAT_WEBAPPS/ROOT
  TOMCAT_ROOT_WAR=$TOMCAT_WEBAPPS/ROOT.war

  # Remove everything from Tomcat's webapps directory (but don't delete the directory itself)
  # Delete the /home/tomcat7/.jenkins directory
  execute_quietly "rm -rf $TOMCAT_WEBAPPS/* $JENKINS_HOME"

  # Copy the war file from .m2 to webapps
  execute_quietly "cp $M2_LOCAL_PATH $TOMCAT_ROOT_WAR"
  
  # Make sure the war file is owned by tomcat7
  execute_quietly "chown $TOMCAT:$TOMCAT $TOMCAT_ROOT_WAR"
  
  # Run the cleanup script that removes old log files, sets up JSP's, etc
  $TOMCAT_CLEANUP
  
}

function install_plugin {

  REPO=https://updates.jenkins-ci.org/download/plugins
  GROUP_ID=org.jenkins.plugins
  ARTIFACT_ID=$1
  VERSION=$2
  TYPE=jpi
  PLUGIN_URL=$REPO/$ARTIFACT_ID/$VERSION/$ARTIFACT_ID.hpi
  
  $MY_DIR/../common/m2downloadurl $QUIET_FLAG $PLUGIN_URL $GROUP_ID $ARTIFACT_ID $VERSION --type=$TYPE
  M2_LOCAL_PATH=$($MY_DIR/../common/m2path $GROUP_ID $ARTIFACT_ID $VERSION --type="$TYPE")
  
  echo "install   -> plugin :: $ARTIFACT_ID :: $VERSION"
  PLUGIN_FILE=$JENKINS_HOME/plugins/$ARTIFACT_ID.$TYPE
  execute_quietly "cp $M2_LOCAL_PATH $PLUGIN_FILE"
  execute_quietly "touch $PLUGIN_FILE.pinned" 
  
}

function install_cas_plugin {

  REPO=http://maven.kuali.org/external
  GROUP_ID=org/jenkins/plugins
  ARTIFACT_ID=cas-plugin
  VERSION=1.1.2-kuali-patch1
  TYPE=jpi
  
  PLUGIN_URL=$REPO/$GROUP_ID/$ARTIFACT_ID/$VERSION/$ARTIFACT_ID-$VERSION.$TYPE
  
  $MY_DIR/../common/m2downloadurl $QUIET_FLAG $PLUGIN_URL $GROUP_ID $ARTIFACT_ID $VERSION --type=$TYPE
  M2_LOCAL_PATH=$($MY_DIR/../common/m2path $GROUP_ID $ARTIFACT_ID $VERSION --type="$TYPE")
  
  echo "install   -> plugin :: $ARTIFACT_ID :: $VERSION"
  PLUGIN_FILE=$JENKINS_HOME/plugins/$ARTIFACT_ID.$TYPE
  execute_quietly "cp $M2_LOCAL_PATH $PLUGIN_FILE"
  execute_quietly "touch $PLUGIN_FILE.pinned" 
  
}

function install_plugins {

  echo "configure -> jenkins:plugins"

  execute_quietly "rm    -rf $JENKINS_HOME/plugins"
  execute_quietly "mkdir -p  $JENKINS_HOME/plugins"

  # supported plugins (in alphabetical order)
  install_plugin build-pipeline-plugin 1.4.2

  # We are using a fork of the cas-plugin to work around issues with supplying group/role information correctly from KIS and CAS
  install_cas_plugin

  install_plugin credentials           1.10
  install_plugin cucumber-reports      0.0.22 
  install_plugin dashboard-view        2.9.2
  install_plugin depgraph-view         0.11
  install_plugin ec2                   1.21
  install_plugin email-ext             2.37.2
  install_plugin git                   2.0.3
  install_plugin git-client            1.6.3
  install_plugin greenballs            1.14
  install_plugin jobConfigHistory      2.5
  install_plugin jquery                1.7.2-1 
  install_plugin jquery-ui             1.0.2
  install_plugin ldap                  1.8
  install_plugin mailer                1.8
  install_plugin mask-passwords        2.7.2
  install_plugin maven-plugin          2.1
  install_plugin nested-view           1.14
  install_plugin next-build-number     1.1
  install_plugin node-iterator-api     1.2
  install_plugin parameterized-trigger 2.22
  install_plugin scm-api               0.2
  install_plugin ssh-credentials       1.6.1
  install_plugin token-macro           1.10
  install_plugin template-project      1.4.1

  chown -R $TOMCAT:$TOMCAT $TOMCAT_HOME  
  
}

function configure_tomcat_user {

  echo "configure -> $TOMCAT:user"
  echo "purge     -> gpg ssh m2 svn"
  rm -rf $TOMCAT_HOME/.gnupg $TOMCAT_HOME/.ssh $TOMCAT_HOME/.m2 $TOMCAT_HOME/.subversion
  cp -R /root/.gnupg       $TOMCAT_HOME
  cp -R /root/.ssh         $TOMCAT_HOME
  echo "copy      -> root m2 repo"
  cp -R /root/.m2          $TOMCAT_HOME
  cp -R /root/.subversion  $TOMCAT_HOME
  
  # Sets up Java + Maven + Jenkins Master
  cp /root/.bashrc       $TOMCAT_HOME/.bash_profile
  cp /root/.bash_aliases $TOMCAT_HOME/.bash_aliases
  
  # Make sure everything is owned by tomcat
  chown -R $TOMCAT:$TOMCAT $TOMCAT_HOME
  
}

function configure_tomcat {

  echo "configure -> $TOMCAT"
  ECHO="JAVA_OPTS=\"\$JAVA_OPTS -Duser.timezone=$JENKINS_TIMEZONE\""
  TOMCAT_OPT_FILE=/etc/default/$TOMCAT
  echo "$ECHO" >> $TOMCAT_OPT_FILE
  
}

function configure_jenkins_location {

  # explain what we are up to
  echo "configure -> jenkins:location"

  # This is the config file holding the jenkins location and admin email address
  JENKINS_LOCATION_CONFIG_FILE=$JENKINS_HOME/jenkins.model.JenkinsLocationConfiguration.xml

  # Update the admin email address
  FIND="<adminAddress>.*</adminAddress>"
  REPLACE="<adminAddress>$JENKINS_ADMIN_EMAIL_ADDRESS</adminAddress>"
  execute_quietly "sed -i -e s:$FIND:$REPLACE:g $JENKINS_LOCATION_CONFIG_FILE"

  # Update the jenkins url
  FIND="<jenkinsUrl>.*</jenkinsUrl>"
  REPLACE="<jenkinsUrl>https\://$JENKINS_MASTER</jenkinsUrl>"
  execute_quietly "sed -i -e s:$FIND:$REPLACE:g $JENKINS_LOCATION_CONFIG_FILE"

}

function update_jenkins_config_xml {

  # This is the main jenkins config file
  JENKINS_CONFIG_FILE=$JENKINS_HOME/config.xml

  # Update the CAS url according to the stack we are configuring test/prod
  # explain what we are up to
  CAS=test-cas.kuali.org
  if [ "$STACK" == "prod" ]; then
    CAS=cas.kuali.org
  fi
  echo "configure -> jenkins:cas [$CAS]"
  FIND="<casServerUrl>.*</casServerUrl>"
  REPLACE="<casServerUrl>https://$CAS</casServerUrl>"
  execute_quietly "sed -i -e s@$FIND@$REPLACE@g $JENKINS_LOCATION_CONFIG_FILE"

  # Update the EC2 Region
  echo "configure -> jenkins:region"
  execute_quietly "sed -i -e s@<name>ec2-.*</name>@<name>ec2-$REGION</name>@g $JENKINS_CONFIG_FILE"
  execute_quietly "sed -i -e s@<region>.*</region>@<region>$REGION</region>@g $JENKINS_CONFIG_FILE"
  
  echo "configure -> jenkins:slaves (remove)"
  # delete everything between <slaves> and </slaves> (including the tags themselves)
  execute_quietly "sed -i /<slaves>/,/<\/slaves>/d $JENKINS_CONFIG_FILE"
  
  echo "configure -> jenkins:slave:stack:tag"
  STACK_TAG_NAME_LINE_NUMBER=$(cat -n $JENKINS_CONFIG_FILE | grep "<name>Stack</name>" | cut -f 1 | xargs)
  STACK_TAG_VALUE_LINE_NUMBER=$(($STACK_TAG_NAME_LINE_NUMBER + 1))
  
  sed -i -e "214s/<value>.*<\/value>/<value>$STACK<\/value>/" $JENKINS_CONFIG_FILE
  
}

function configure_build_slave_ami_job {

  # explain what we are up to
  echo "configure -> jenkins:buildslavejob"
  
  # This is the config file containing the config for the job that updates the build slave AMI
  JENKINS_CONFIG_FILE=$JENKINS_HOME/jobs/kdo-create-build-slave-ami/config.xml

  execute_quietly "sed -i -e s:EC2_STACK=.*:EC2_STACK=$STACK:g    $JENKINS_CONFIG_FILE"
  execute_quietly "sed -i -e s:EC2_REGION=.*:EC2_REGION=$REGION:g $JENKINS_CONFIG_FILE"
  
}

function configure_jenkins {

  echo "configure -> jenkins"
  JENKINS_CONFIG_DIR=$MY_DIR/../../../jenkins
  GPG_ENCRYPTED=$JENKINS_CONFIG_DIR/master.zip.gpg
  # zip of Jenkins config files from the .jenkins home dir
  GPG_DECRYPTED=$JENKINS_CONFIG_DIR/master.zip
  decrypt_file $GPG_ENCRYPTED $GPG_DECRYPTED
  execute_quietly "unzip -o $GPG_DECRYPTED -d $TOMCAT_HOME"
  execute_quietly "rm $GPG_DECRYPTED"
  
  # Modify jenkins.model.JenkinsLocationConfiguration.xml with the proper dns value and admin email address
  configure_jenkins_location
  
  # Modify ~/.jenkins/config.xml as needed
  update_jenkins_config_xml

  # Modify ~/.jenkins/jobs/kdo-create-build-slave-ami/config.xml with the correct stack and region values
  configure_build_slave_ami_job
  
  chown -R $TOMCAT:$TOMCAT $TOMCAT_HOME

}

function check_args {
  check_not_blank FQDN $FQDN
  check_not_blank REGION $REGION
  check_not_blank STACK $STACK
  check_not_blank JENKINS_VERSION $JENKINS_VERSION
  check_not_blank GPG_PASSPHRASE $GPG_PASSPHRASE
}

MY_DIR="$( cd "$( dirname "$0" )" && pwd )"
ME=$(basename $0)
source $MY_DIR/../common/functions.sh

usage() { echo "Usage: $ME [-h] [-q] fqdn region stack version password" 1>&2; exit 1; }

QUIET=false
while getopts hq flag; do
  case $flag in
    h)
      usage;
      ;;
    q)
      QUIET="true";
      ;;
    ?)
      usage;
      exit;
      ;;
  esac
done

shift $(( OPTIND - 1 ));

FQDN=$1
REGION=$2
STACK=$3
JENKINS_VERSION=$4
GPG_PASSPHRASE=$5

check_args

JENKINS_MASTER=$FQDN
QUIET_FLAG=""
if [ "$QUIET" == "true" ]; then
  QUIET_FLAG="-q"
fi

TOMCAT=tomcat7
TOMCAT_HOME=/home/$TOMCAT
JENKINS_HOME=$TOMCAT_HOME/.jenkins
JENKINS_ADMIN_EMAIL_ADDRESS=jcaddel@kuali.org
JENKINS_TIMEZONE=US/Eastern
TOMCAT_OPT_FILE=/etc/default/$TOMCAT

echo "stop      -> $TOMCAT:service"
execute_quietly "service $TOMCAT stop"

configure_tomcat
configure_tomcat_user
install_jenkins
install_plugins
configure_jenkins
echo "start     -> $TOMCAT:service"
execute_quietly "service $TOMCAT start"
echo "wait      -> jenkins:ready"
wait_for_string "/var/lib/$TOMCAT/logs/catalina.out" "Jenkins is fully up and running"

