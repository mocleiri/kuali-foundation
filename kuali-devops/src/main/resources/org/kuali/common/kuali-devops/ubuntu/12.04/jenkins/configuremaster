#!/bin/bash
#
# Copyright 2004-2014 The Kuali Foundation
#
# Licensed under the Educational Community License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.opensource.org/licenses/ecl2.php
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This is pushing the limits for what should be getting done via bash scripting
# Should really migrate this into puppet or java or something else with enhanced capabilities 
#


function configure_tomcat_user {

  echo "purge     -> gpg ssh m2 svn"
  rm -rf $TOMCAT_HOME/.gnupg $TOMCAT_HOME/.ssh $TOMCAT_HOME/.m2 $TOMCAT_HOME/.subversion
  cp -R /root/.gnupg        $TOMCAT_HOME
  cp -R /root/.ssh          $TOMCAT_HOME
  cp -R /root/.subversion   $TOMCAT_HOME
  echo "copy      -> root m2 repo"
  execute_quietly "rsync --archive --verbose --stats /root/.m2 $TOMCAT_HOME --exclude=**/oracle/jdk*/** --exclude=**/firefox/** --exclude=**/org/jenkins/**" 
  
  # Make sure everything is owned by tomcat
  chown -R $TOMCAT:$TOMCAT $TOMCAT_HOME
  
  
  echo "configure -> tomcat7 sudo"
  FILE=/etc/sudoers.d/90-cloudimg-ubuntu
  echo "ubuntu  ALL=(ALL) NOPASSWD:ALL" >  $FILE
  echo "tomcat7 ALL=(ALL) NOPASSWD:ALL" >> $FILE
  
}

function configure_jenkins_location {

  # explain what we are up to
  echo "configure -> jenkins:location"

  # This is the config file holding the jenkins location and admin email address
  JENKINS_LOCATION_CONFIG_FILE=$JENKINS_HOME/jenkins.model.JenkinsLocationConfiguration.xml

  # Update the admin email address
  FIND="<adminAddress>.*</adminAddress>"
  REPLACE="<adminAddress>$JENKINS_ADMIN_EMAIL_ADDRESS</adminAddress>"
  execute_quietly "sed -i -e s:$FIND:$REPLACE:g $JENKINS_LOCATION_CONFIG_FILE"

  # Update the jenkins url
  FIND="<jenkinsUrl>.*</jenkinsUrl>"
  REPLACE="<jenkinsUrl>https\://$JENKINS_MASTER</jenkinsUrl>"
  execute_quietly "sed -i -e s:$FIND:$REPLACE:g $JENKINS_LOCATION_CONFIG_FILE"

}

function update_jenkins_config_xml {

  # This is the main jenkins config file
  JENKINS_CONFIG_FILE=$JENKINS_HOME/config.xml

  # Update the CAS url according to the stack we are configuring test/prod
  # explain what we are up to
  CAS=test-cas.kuali.org
  if [ "$STACK" == "prod" ]; then
    CAS=cas.kuali.org
  fi
  echo "configure -> jenkins:cas [$CAS]"
  FIND="<casServerUrl>.*</casServerUrl>"
  REPLACE="<casServerUrl>https://$CAS</casServerUrl>"
  execute_quietly "sed -i -e s@$FIND@$REPLACE@g $JENKINS_LOCATION_CONFIG_FILE"

  echo "remove    -> slave :: existing"
  # delete everything between <slaves> and </slaves> (including the tags themselves)
  execute_quietly "sed -i /<slaves>/,/<\/slaves>/d $JENKINS_CONFIG_FILE"
  
  # Update the EC2 Region for the slaves
  echo "configure -> slave :: region [$REGION]"
  execute_quietly "sed -i -e s@<name>ec2-.*</name>@<name>ec2-$REGION</name>@g $JENKINS_CONFIG_FILE"
  execute_quietly "sed -i -e s@<region>.*</region>@<region>$REGION</region>@g $JENKINS_CONFIG_FILE"

  # Update the build slave AMI
  echo "configure -> slave :: ami [$AMI]"
  execute_quietly "sed -i -e s@<ami>.*</ami>@<ami>$AMI</ami>@g $JENKINS_CONFIG_FILE"
  
  echo "update    -> slave :: tag :: Stack=$STACK"
  update_slave_tag $JENKINS_CONFIG_FILE "Stack" $STACK
  
  echo "update    -> env :: JENKINS_MASTER=$JENKINS_MASTER"
  update_global_environment_variable $JENKINS_CONFIG_FILE "JENKINS_MASTER" $JENKINS_MASTER
  
  echo "update    -> env :: EC2_STACK=$STACK"
  update_global_environment_variable $JENKINS_CONFIG_FILE "EC2_STACK" $STACK
  
  echo "update    -> env :: EC2_REGION=$REGION"
  update_global_environment_variable $JENKINS_CONFIG_FILE "EC2_REGION" $REGION
  
  echo "update    -> env :: JENKINS_VERSION=$JENKINS_VERSION"
  update_global_environment_variable $JENKINS_CONFIG_FILE "JENKINS_VERSION" $JENKINS_VERSION
  
}

# Update the section of config.xml that holds the tags for CI slaves
function update_slave_tag {
  local FILE=$1
  local NAME=$2
  local VALUE=$3
  LINE_NUMBER=$(get_next_line_number $FILE "<name>$NAME</name>")
  execute_quietly "sed -i -e ${LINE_NUMBER}s/<value>.*<\/value>/<value>$VALUE<\/value>/ $FILE"
}

# Update the section of config.xml that holds global environment variables
function update_global_environment_variable {
  local FILE=$1
  local NAME=$2
  local VALUE=$3
  LINE_NUMBER=$(get_next_line_number $FILE "<string>$NAME</string>")
  execute_quietly "sed -i -e ${LINE_NUMBER}s/<string>.*<\/string>/<string>$VALUE<\/string>/ $FILE"
}

function configure_jenkins {

  echo "configure -> jenkins"
  local GROUP_ID=org.jenkins
  local ARTIFACT_ID=jenkins-master-backup
  local VERSION=$JENKINS_VERSION
  local CLASSIFIER=$STACK-latest-$MODE
  local TYPE=tar.gz
  local PREFIX=private
  local BUCKET=maven.kuali.org
  source $MY_DIR/../common/aws.sh
  $MY_DIR/../common/m2s3get $QUIET_FLAG --prefix=$PREFIX --type=$TYPE --classifier=$CLASSIFIER $ACCESS_KEY $SECRET_KEY $BUCKET $GROUP_ID $ARTIFACT_ID $VERSION
  local TAR_GZ=$($MY_DIR/../common/m2path --classifier=$CLASSIFIER --type=$TYPE $GROUP_ID $ARTIFACT_ID $VERSION)
  
  echo "unpack    -> $TAR_GZ"
  execute_quietly "tar --extract --verbose --file $TAR_GZ --directory $TOMCAT_HOME"
  
  # Modify jenkins.model.JenkinsLocationConfiguration.xml with the proper dns value and admin email address
  configure_jenkins_location
  
  # Modify ~/.jenkins/config.xml as needed
  update_jenkins_config_xml
  
  TOMCAT_RESOURCES=/var/lib/$TOMCAT/webapps/resources
  IMAGES=$MY_DIR/master/images
  
  execute_quietly "mkdir -p $TOMCAT_RESOURCES"
  execute_quietly "cp -R $IMAGES $TOMCAT_RESOURCES"
  
  # LTS plugin updates
  configure_jenkins_update_center

  chown -R $TOMCAT:$TOMCAT $TOMCAT_HOME

}

function check_args {

  check_not_blank FQDN $FQDN
  check_not_blank REGION $REGION
  check_not_blank STACK $STACK
  check_not_blank MODE $MODE
  check_not_blank AMI $AMI
  check_not_blank JENKINS_VERSION $JENKINS_VERSION
  check_not_blank AES_PASSPHRASE $AES_PASSPHRASE
  
  check_jenkins_mode
  
}

MY_DIR="$( cd "$( dirname "$0" )" && pwd )"
ME=$(basename $0)
source $MY_DIR/../common/functions.sh

usage() { echo "Usage: $ME [-h] [-q] fqdn region stack mode ami version password" 1>&2; exit 1; }

QUIET=false
while getopts hq flag; do
  case $flag in
    h)
      usage;
      ;;
    q)
      QUIET="true";
      ;;
    ?)
      usage;
      exit;
      ;;
  esac
done

shift $(( OPTIND - 1 ));

FQDN=$1
REGION=$2
STACK=$3
MODE=$4
AMI=$5
JENKINS_VERSION=$6
AES_PASSPHRASE=$7

check_args

JENKINS_MASTER=$FQDN
QUIET_FLAG=""
if [ "$QUIET" == "true" ]; then
  QUIET_FLAG="-q"
fi

TOMCAT=tomcat7
TOMCAT_HOME=/home/$TOMCAT
JENKINS_HOME=$TOMCAT_HOME/.jenkins
JENKINS_ADMIN_EMAIL_ADDRESS=U2FsdGVkX19a06Gz2RzmX3AA9e94v5M28cxcgL/NlHmM5aOw34hWLO+xYBO5Lcf5
JENKINS_ADMIN_EMAIL_ADDRESS=$(decrypt $JENKINS_ADMIN_EMAIL_ADDRESS $AES_PASSPHRASE)

JENKINS_TIMEZONE=US/Eastern
TOMCAT_OPT_FILE=/etc/default/$TOMCAT

echo "stop      -> $TOMCAT:service"
execute_quietly "service $TOMCAT stop"
configure_tomcat_user
configure_jenkins
echo "start     -> $TOMCAT:service"
execute_quietly "service $TOMCAT start"
echo "wait      -> jenkins:ready"
wait_for_string "/var/lib/$TOMCAT/logs/catalina.out" "Jenkins is fully up and running"

