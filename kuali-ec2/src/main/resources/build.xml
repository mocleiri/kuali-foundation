<!--

    Copyright 2004-2012 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project name="Tomcat Instance Manager">
  <description>Manage the creating/removing of Tomcat instances on an ec2 deployment server</description>
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <target name="noop">
    <echo>noop</echo>
  </target>

  <target name="olesftp">
    <exec executable="userdel">
      <arg value="upload" />
    </exec>
    <exec executable="rm">
      <arg value="-rf" />
      <arg value="/home/upload" />
    </exec>
    <exec executable="useradd">
      <arg value="-g" />
      <arg value="tomcat" />
      <arg value="upload" />
    </exec>
    <exec executable="passwd" inputstring="data4OLE">
      <arg value="upload" />
      <arg value="--stdin" />
    </exec>
    <exec executable="chmod">
      <arg value="g+rx" />
      <arg value="/home/upload" />
    </exec>
    <copy file="/root/kuali-ec2/src/main/resources/ec2/etc/ssh/sshd_config" tofile="/etc/ssh/sshd_config" overwrite="true" />
    <copy file="/root/kuali-ec2/src/main/resources/ole/server.xml" tofile="/usr/local/tomcat/conf/server.xml" overwrite="true" />
    <exec executable="chown">
      <arg value="tomcat:tomcat" />
      <arg value="/usr/local/tomcat/conf/server.xml" />
    </exec>
    <exec executable="service">
      <arg value="sshd" />
      <arg value="restart" />
    </exec>
  </target>

  <target name="resetmedium">
    <!-- Note: instance is ignored, there is only ever 1 instance on an ec2 medium server -->
    <property name="instance" value="1" />
    <property name="tomcat.user" value="tomcat" />
    <property name="catalina.home" location="/usr/local/tomcat" />
    <property name="catalina.base" value="/usr/local/tomcat" />

    <antcall target="installtomcat" />
    <antcall target="createmedium" />
  </target>

  <target name="resetall">
    <antcall target="removeall" />
    <antcall target="createall" />
  </target>

  <target name="removeall">
    <antcall target="remove">
      <param name="instance" value="1" />
    </antcall>
    <antcall target="remove">
      <param name="instance" value="2" />
    </antcall>
    <antcall target="remove">
      <param name="instance" value="3" />
    </antcall>
  </target>

  <target name="createall">
    <antcall target="create">
      <param name="instance" value="1" />
    </antcall>
    <antcall target="create">
      <param name="instance" value="2" />
    </antcall>
    <antcall target="create">
      <param name="instance" value="3" />
    </antcall>
  </target>

  <target name="createuser" depends="init">
    <exec executable="useradd">
      <arg value="-g" />
      <arg value="tomcat" />
      <arg value="${tomcat.user}" />
    </exec>
    <copy file="src/main/resources/.bashrc" tofile="/home/${tomcat.user}/.bashrc" overwrite="true">
      <filterset begintoken="${" endtoken="}">
        <filter token="environment" value="${environment}" />
        <filter token="jdk.version" value="${jdk.version}" />
      </filterset>
    </copy>
    <copy file="src/main/resources/rice.keystore" tofile="/home/${tomcat.user}/.ssh/rice.keystore" overwrite="true" />
    <chmod dir="/home/${tomcat.user}/.ssh" perm="400" includes="rice.keystore" />
    <copy file="src/main/resources/ec2/.ssh/config" tofile="/home/${tomcat.user}/.ssh/config" overwrite="true" />
    <chmod dir="/home/${tomcat.user}/.ssh" perm="400" includes="config" />
  </target>

  <target name="setuptomcat">
    <mkdir dir="${catalina.base}" />
    <mkdir dir="${catalina.base}/lib" />
    <mkdir dir="${catalina.base}/logs" />
    <mkdir dir="${catalina.base}/temp" />
    <mkdir dir="${catalina.base}/webapps" />
    <copy todir="${catalina.base}/conf">
      <fileset dir="${catalina.home}/conf" />
    </copy>
    <copy todir="${catalina.base}/logs">
      <fileset dir="src/main/resources/apache-tomcat/jsps" />
    </copy>
  </target>

  <target name="copytomcatconfig">
    <copy todir="${catalina.base}/conf" overwrite="true">
      <fileset dir="src/main/resources/apache-tomcat/${tomcat.major.version}/conf" />
      <filterset begintoken="${" endtoken="}">
        <filter token="tomcat.shutdown.port" value="${tomcat.shutdown.port}" />
        <filter token="tomcat.http.port" value="${tomcat.http.port}" />
        <filter token="tomcat.https.port" value="${tomcat.https.port}" />
        <filter token="catalina.base" value="${catalina.base}" />
      </filterset>
    </copy>
  </target>
  <target name="chowntomcatdirs">
    <exec executable="chown">
      <arg value="-R" />
      <arg value="${tomcat.user}:tomcat" />
      <arg value="${catalina.base}" />
    </exec>
    <exec executable="chown">
      <arg value="-R" />
      <arg value="${tomcat.user}:tomcat" />
      <arg value="/home/${tomcat.user}" />
    </exec>
  </target>

  <target name="create" depends="init">
    <property name="tomcat.user" value="tomcat${instance}" />
    <property name="catalina.home" location="/usr/local/tomcat" />
    <property name="catalina.base" value="/usr/local/tomcat${instance}" />
    <antcall target="createuser" />
    <antcall target="setuptomcat" />
    <antcall target="copytomcatconfig" />
    <antcall target="chowntomcatdirs" />
  </target>

  <target name="createmedium" depends="init">
    <exec executable="userdel">
      <arg value="-rf" />
      <arg value="${tomcat.user}" />
    </exec>
    <exec executable="groupadd">
      <arg value="tomcat" />
    </exec>
    <antcall target="createuser" />
    <antcall target="copytomcatconfig" />
    <antcall target="chowntomcatdirs" />
    <exec executable="chown">
      <arg value="-R" />
      <arg value="${tomcat.user}:tomcat" />
      <arg value="${tomcat.dir}" />
    </exec>
  </target>

  <target name="updatejdk7">
    <symlink action="delete" link="/usr/java/jdk7" />
    <delete dir="${jdk7.dir}" />
    <unzip src="${jdk7.zip}" dest="/usr/java" />
    <chmod dir="${jdk7.dir}/bin" perm="755" includes="*" />
    <chmod dir="${jdk7.dir}/jre/bin" perm="755" includes="*" />
    <symlink link="/usr/java/jdk7" resource="${jdk7.dir}" />
  </target>

  <target name="updatejdk6">
    <symlink action="delete" link="/usr/java/jdk6" />
    <delete dir="${jdk6.dir}" />
    <unzip src="${jdk6.zip}" dest="/usr/java" />
    <chmod dir="${jdk6.dir}/bin" perm="755" includes="*" />
    <chmod dir="${jdk6.dir}/jre/bin" perm="755" includes="*" />
    <symlink link="/usr/java/jdk6" resource="${jdk6.dir}" />
  </target>

  <target name="installtomcat" depends="tomcatinit,updatejdk6,updatejdk7">
    <!-- Remove the symbolic link to whatever version was being used before (if any) -->
    <symlink action="delete" link="/usr/local/tomcat" />

    <!-- Remove previous installation of this version (if any) -->
    <delete dir="${tomcat.dir}" />

    <!-- Inflate the zip into /usr/local/apache-tomcat-[version] -->
    <unzip src="${tomcat.zip}" dest="/usr/local" />

    <!-- Delete/recreate the webapps directory to remove the pre-installed apps -->
    <delete dir="${tomcat.dir}/webapps" />
    <mkdir dir="${tomcat.dir}/webapps" />

    <!-- Clean up the bin directory, add some simple shell scripts, and make *.sh executable -->
    <delete>
      <fileset dir="${tomcat.dir}/bin" includes="*.bat" />
    </delete>
    <copy todir="${tomcat.dir}/bin">
      <fileset dir="src/main/resources/apache-tomcat/root/bin" />
    </copy>
    <chmod dir="${tomcat.dir}/bin" perm="755" includes="*.sh" />

    <!-- Copy in our utility JSP's -->
    <copy todir="${tomcat.dir}/logs">
      <fileset dir="src/main/resources/apache-tomcat/jsps" />
    </copy>

    <!-- Copy in our customized versions of server.xml and web.xml -->
    <property name="root.server.xml" value="src/main/resources/apache-tomcat/${tomcat.major.version}/root/conf/server.xml" />
    <property name="root.web.xml" value="src/main/resources/apache-tomcat/${tomcat.major.version}/conf/web.xml" />

    <copy file="${root.server.xml}" tofile="${tomcat.dir}/conf/server.xml" overwrite="true">
      <filterset begintoken="${" endtoken="}">
        <filter token="tomcat.shutdown.port" value="${tomcat.shutdown.port}" />
        <filter token="tomcat.http.port" value="${tomcat.http.port}" />
        <filter token="tomcat.https.port" value="${tomcat.https.port}" />
      </filterset>
    </copy>
    <copy file="${root.web.xml}" tofile="${tomcat.dir}/conf/web.xml" overwrite="true" />

    <!-- Final step is to symlink /usr/local/tomcat to the versioned tomcat directory -->
    <symlink link="/usr/local/tomcat" resource="${tomcat.dir}" />
  </target>

  <target name="installappdynamics">
    <!-- Remove the symbolic link to whatever version was being used before (if any) -->
    <symlink action="delete" link="${appdynamics.symlink}" />

    <!-- Remove previous installation of this version (if any) -->
    <delete dir="${appdynamics.dir}" />

    <!-- Inflate the zip into /usr/local/server-agent-[version] -->
    <unzip src="${appdynamics.zip}" dest="${appdynamics.dir}" />

    <!-- Symlink /usr/local/server-agent to the versioned App Dynamics directory -->
    <symlink link="${appdynamics.symlink}" resource="${appdynamics.dir}" />

    <exec executable="chown">
      <arg value="-R" />
      <arg value="tomcat:tomcat" />
      <arg value="${appdynamics.symlink}" />
    </exec>

    <exec executable="chown">
      <arg value="-R" />
      <arg value="tomcat:tomcat" />
      <arg value="${appdynamics.dir}" />
    </exec>

  </target>

  <target name="deletejenkinsconfig" depends="jenkinsinit">
    <property name="jenkins.config" value="/home/${tomcat.user}/.jenkins" />
    <delete dir="${jenkins.config}" />
  </target>

  <target name="upgradejenkins" depends="jenkinsinit">
    <property name="tomcat.user" value="tomcat${tomcat.instance}" />
    <property name="root.war" value="/usr/local/${tomcat.user}/webapps/ROOT.war" />
    <property name="root.dir" value="/usr/local/${tomcat.user}/webapps/ROOT" />

    <exec executable="su">
      <arg value="-" />
      <arg value="${tomcat.user}" />
      <arg value="forced-shutdown.sh" />
    </exec>
    <exec executable="su">
      <arg value="-" />
      <arg value="${tomcat.user}" />
      <arg value="cleanup.sh" />
    </exec>
    <delete dir="${root.dir}" />
    <delete file="${root.war}" />
    <copy file="${jenkins.war}" tofile="${root.war}" />
    <exec executable="chown">
      <arg value="${tomcat.user}:tomcat" />
      <arg value="${root.war}" />
    </exec>
  </target>

  <target name="installjenkins" depends="jenkinsinit">
    <antcall target="upgradejenkins" />
    <antcall target="deletejenkinsconfig" />
  </target>

  <target name="remove" depends="init">
    <property name="tomcat.user" value="tomcat${instance}" />
    <property name="catalina.base" value="/usr/local/tomcat${instance}" />
    <exec executable="userdel">
      <arg value="-rf" />
      <arg value="${tomcat.user}" />
    </exec>
    <delete dir="${catalina.base}" />
  </target>

  <target name="jenkinsinit">
    <condition property="jenkins.set">
      <and>
        <isset property="tomcat.instance" />
        <isset property="jenkins.war" />
      </and>
    </condition>
    <fail unless="jenkins.set">
      Must specify tomcat.instance and jenkins.war
    </fail>
  </target>

  <target name="tomcatinit">
    <condition property="tomcat.set">
      <and>
        <isset property="tomcat.dir" />
        <isset property="tomcat.zip" />
        <isset property="tomcat.major.version" />
        <isset property="tomcat.version" />
      </and>
    </condition>
    <fail unless="tomcat.set">
      Must specify tomcat.dir, tomcat.zip, tomcat.major.version, and tomcat.version
    </fail>
  </target>

  <target name="init">
    <condition property="instance.set">
      <and>
        <isset property="instance" />
        <isset property="environment" />
        <isset property="tomcat.major.version" />
      </and>
    </condition>
    <fail unless="instance.set">Must specify instance, environment, and tomcat.major.version</fail>
    <if>
      <equals arg1="${instance}" arg2="1" />
      <then>
        <property name="tomcat.shutdown.port" value="8006" />
        <property name="tomcat.http.port" value="8081" />
        <property name="tomcat.https.port" value="8444" />
      </then>
      <elseif>
        <equals arg1="${instance}" arg2="2" />
        <then>
          <property name="tomcat.shutdown.port" value="8007" />
          <property name="tomcat.http.port" value="8082" />
          <property name="tomcat.https.port" value="8445" />
        </then>
      </elseif>
      <elseif>
        <equals arg1="${instance}" arg2="3" />
        <then>
          <property name="tomcat.shutdown.port" value="8008" />
          <property name="tomcat.http.port" value="8083" />
          <property name="tomcat.https.port" value="8446" />
        </then>
      </elseif>
      <else>
        <fail>
          Instance must be 1, 2, or 3
        </fail>
      </else>
    </if>
  </target>

</project>