#!/bin/sh -x

function klog {
    {
	typeset message=$1
	echo "`date +%Y%m%d.%H.%M.%S`: $message"
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf klog

function kmail {
    {
	typeset recipient=$1
	typeset subject=$2
	typeset message=$3
	if [[ "$SEND_MAIL" = "true" ]]
	then
		klog "mailing recipent: $recipient"
        echo "$message" | mail -s "$subject" $recipient
	else
	    echo "SEND_MAIL is turned off"
	fi 
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kmail

function kexec {
    {
	typeset command=$1
	typeset mailing_list_override=$2
	klog "executing command: $command"
	eval $command
	typeset return_status=$?
	if [[ "$return_status" != "0" ]]
	then
		kend $return_status $mailing_list_override
	fi
	return $return_status
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kexec

function kend {
    {
	typeset exit_status=$1
	if [[ $2 != "" ]]; then
	    typeset mailing_list=$2
	else
	    typeset mailing_list=$APPLICATION_CFG_MAIL_LIST
	fi
	klog "ending with exit status: $exit_status"
	if [[ "$exit_status" != "0" ]]; then
	    kmail $mailing_list "$SCRIPT_NAME has errors" "`cat $SCRIPT_LOG`"
	fi
	exit $exit_status
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kend

function ksetprops {
    {
	typeset environment=$1
	typeset version=$2
	typeset database_platform=$3
	typeset database_user=$DATABASE_APPLICATION_CODE$environment
	typeset schema="`echo $database_user | tr a-z A-Z`"
	typeset database_password=$environment"174"$DATABASE_APPLICATION_CODE
	typeset rice_database_user=$APPLICATION_INFRASTRUCTURE_DATABASE_PREFIX$APPLICATION_INFRASTRUCTURE_DATABASE_VERSION$environment
	typeset rice_database_password=$environment"174"$APPLICATION_INFRASTRUCTURE_DATABASE_PREFIX$APPLICATION_INFRASTRUCTURE_DATABASE_VERSION
	kexec "echo \"working.directory=$BASE_DIRECTORY\" > $ANT_PROPERTIES_FILE"
	kexec "echo \"application.working.directory=$APPLICATION_DIRECTORY\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"application.deploy.directory=$DEPLOY_BASE_DIRECTORY/$environment/$JAVA_APPLICATION_CODE\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"database.project=$DATABASE_PROJECT\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"impex.properties.file=$IMPEX_PROPERTIES_FILE\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"application.java.project=$APPLICATION_JAVA_PROJECT\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"application.database.project=$APPLICATION_DATABASE_PROJECT\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"application=$JAVA_APPLICATION_CODE\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"build.environment=$environment\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"build.version=$version\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"schema=$schema\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"datasource.ojb.platform=$database_platform\" >> $ANT_PROPERTIES_FILE"
	kexec "echo \"datasource.username=$database_user\" >> $ANT_PROPERTIES_FILE"
	echo "datasource.password=$database_password" >> $ANT_PROPERTIES_FILE 
	if [[ -n $APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT ]]
	then
		kexec "echo \"infrastructure.database.project=$APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT\" >> $ANT_PROPERTIES_FILE"
	else
		kexec "echo \"rice.datasource.username=$rice_database_user\" >> $ANT_PROPERTIES_FILE"
		echo "rice.datasource.password=$rice_database_password" >> $ANT_PROPERTIES_FILE 
	fi
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf ksetprops

function kcheckout {
    {
	typeset project=$1
	typeset version=$2
	typeset target_directory=$3
	kexec "svn -q checkout $SRCCTRL_URL/$project/$version $target_directory"
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kcheckout

function kexport {
    {
	typeset environment=$1
	typeset version=$2
	typeset tempdir=$APPLICATION_DATABASE_PROJECT"-tmp"
	typeset diffsearchstring="Only in $tempdir"
	ksetprops $environment $version Oracle9i
	rm -rf $APPLICATION_DATABASE_PROJECT
	kcheckout $APPLICATION_DATABASE_PROJECT $version $APPLICATION_DATABASE_PROJECT
	cp -r $APPLICATION_DATABASE_PROJECT $tempdir
	kant export -Dgenerated.properties.file=$ANT_PROPERTIES_FILE
	svn -q add $APPLICATION_DATABASE_PROJECT/*
	svn -q add $APPLICATION_DATABASE_PROJECT/doc/*
	for i in $(diff $APPLICATION_DATABASE_PROJECT $tempdir | grep "Only in $tempdir")
	do
		if [[ "$i" != "Only" && "$i" != "in" && "$i" != "$tempdir:" ]]
		then
			svn remove $APPLICATION_DATABASE_PROJECT/$i
		fi
	done
	rm -rf $tempdir
	kexec "svn -q update $APPLICATION_DATABASE_PROJECT"
	kexec "svn commit -m \"daily export\" $APPLICATION_DATABASE_PROJECT"
	kexec "rm -rf $APPLICATION_DATABASE_PROJECT"
	return 0
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kexport

function kant {
    {
	target=$1
	arguments=$2
	mailing_list_override=$3
	klog "executing target: $target with arguments: $arguments"
	kexec "$ANT_COMMAND $arguments -f $ANT_BUILD_FILE $target" $mailing_list_override
	return 0
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kant

function kdailytag {
    {
	version=$1
	old_build_number=`cat $BUILD_NUMBER_FILE`
	new_build_number=`expr $old_build_number + 1`
	new_build_version="build-"$new_build_number
	new_build_version_path=tags/$new_build_version
	kexec "echo $new_build_number > $BUILD_NUMBER_FILE"
	klog "tagging version: $version of application java, database, and infrastructure modules with new_build_version: $new_build_version"
	svn -q delete $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$new_build_version_path -m daily-tag-removal
	svn -q delete $SRCCTRL_URL/$APPLICATION_DATABASE_PROJECT/$new_build_version_path -m daily-tag-removal
	svn -q delete $SRCCTRL_URL/$INFRASTRUCTURE_JAVA_PROJECT/$new_build_version_path-$APPLICATION_JAVA_PROJECT -m daily-tag-removal
	kexec "svn -q copy $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$version $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$new_build_version_path -m kdailytag"
	kexec "svn -q copy $SRCCTRL_URL/$APPLICATION_DATABASE_PROJECT/$version $SRCCTRL_URL/$APPLICATION_DATABASE_PROJECT/$new_build_version_path -m kdailytag"
	kexec "svn -q copy $SRCCTRL_URL/$INFRASTRUCTURE_JAVA_PROJECT/$APPLICATION_INFRASTRUCTURE_SRCCTRL_VERSION $SRCCTRL_URL/$INFRASTRUCTURE_JAVA_PROJECT/$new_build_version_path-$APPLICATION -m kdailytag"
	
	if [[ -n $APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT ]]
	then
		svn -q delete $SRCCTRL_URL/$APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT/$new_build_version_path-$APPLICATION_DATABASE_PROJECT -m daily-tag-removal
		kexec "svn -q copy $SRCCTRL_URL/$APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT/$APPLICATION_INFRASTRUCTURE_SRCCTRL_VERSION $SRCCTRL_URL/$APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT/$new_build_version_path-$APPLICATION -m kdailytag"
	fi
	
	return 0
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kdailytag

function kbranch {
    {
	if [[ "$1" = "standard" ]]
	then
        typeset version_suffix=build-`cat $BUILD_NUMBER_FILE`
	else
		typeset version_suffix=$1
	fi
	version=tags/$version_suffix
	branch=branches/$2-$version_suffix
	klog "create branch: $branch of application java module from version: $version"
	kexec "svn -q copy $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$version $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$branch -m kbranch"
	return 0
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kbranch

function kjavaretag {
    {
	source_version=$1
	target_version=$2
	path=$3
	klog "re-tagging $path from $source_version to $target_version"
	kexec "svn -q delete $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$target_version/$path -m daily-tag"
	kexec "svn -q copy $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$source_version/$path $SRCCTRL_URL/$APPLICATION_JAVA_PROJECT/$target_version/$path -m daily-tag"
	return 0
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kjavaretag

function kpurge {
    {
	directory=$1
	number_of_days_old=$2
	klog "purging items from directory: $directory with number_of_days_old: $number_of_days_old"
	kexec "find $directory -type f -atime +$number_of_days_old -print -exec rm -f {} \;"
	return 0
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kpurge

function kupdate {
    {
	typeset environment=$1
	typeset update_database=$3
	typeset deploy_war=$4
	typeset database_platform=$5
	typeset application_deploy_directory=$DEPLOY_BASE_DIRECTORY/$environment/$JAVA_APPLICATION_CODE
	if [[ "$2" = "standard" ]]
	then
        typeset version=tags/build-`cat $BUILD_NUMBER_FILE`
	else
		typeset version=$2
	fi
	klog "updating environment: $environment with version: $version, update_database: $update_database, and deploy_war: $deploy_war"

	ksetprops $environment $version $database_platform
	
	if [[ "$update_database" = "true" ]]
	then
	    rm -rf $APPLICATION_DATABASE_PROJECT
		kcheckout $APPLICATION_DATABASE_PROJECT $version $APPLICATION_DATABASE_PROJECT
        kant import -Dgenerated.properties.file=$ANT_PROPERTIES_FILE
		kexec "rm -rf $APPLICATION_DATABASE_PROJECT"
		
		if [[ -n $APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT ]]
		then 
			rm -rf $APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT
			kcheckout $APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT $version-$APPLICATION $APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT
        	kant import-no-empty-schema "-Doutput.dir=$BASE_DIRECTORY/$APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT -Dgenerated.properties.file=$ANT_PROPERTIES_FILE"
			kexec "rm -rf $APPLICATION_INFRASTRUCTURE_DATABASE_PROJECT"
		fi
	fi
	
	rm -rf $application_deploy_directory/$APPLICATION_JAVA_PROJECT
	kcheckout $APPLICATION_JAVA_PROJECT $version $application_deploy_directory/$APPLICATION_JAVA_PROJECT
	kant dist-external  -Dgenerated.properties.file=$ANT_PROPERTIES_FILE
	kexec "sudo $DEPLOY_SETTINGS_COMMAND $JAVA_APPLICATION_CODE $environment"
	kexec "sudo $DEPLOY_SECURITY_COMMAND $JAVA_APPLICATION_CODE $environment"
	if [[ "$deploy_war" = "true" ]]
	then
		kant dist-war  -Dgenerated.properties.file=$ANT_PROPERTIES_FILE
		sudo $UNDEPLOY_WAR_FILE_COMMAND $JAVA_APPLICATION_CODE $environment $APPLICATION_SERVER_NAME
		sudo $UNDEPLOY_WAR_CONTEXT_COMMAND $JAVA_APPLICATION_CODE $environment $APPLICATION_SERVER_NAME
		sudo $UNDEPLOY_WAR_DIR_COMMAND $JAVA_APPLICATION_CODE $environment $APPLICATION_SERVER_NAME
		kexec "sudo $DEPLOY_WAR_COMMAND $JAVA_APPLICATION_CODE $environment $APPLICATION_SERVER_NAME"
	fi
	kexec "rm -rf $application_deploy_directory/$APPLICATION_JAVA_PROJECT"

	kexec "sudo $WORK_PURGE_COMMAND $JAVA_APPLICATION_CODE $environment 7"

	return 0
    } >> $SCRIPT_LOG 2>&1
}
typeset -xf kupdate

