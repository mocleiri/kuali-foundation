# -------------------------------------------------------------------
#
#  D A T A B A S E  S E T T I N G S
#
# -------------------------------------------------------------------
# JDBC connection settings. This is used by the JDBCToXML task that
# will create an XML database schema from JDBC metadata. These
# settings are also used by the SQL Ant task to initialize your
# Torque system with the generated SQL.
#
# sameJavaName
#   If true, the JDBC task will set the javaName attribute for the tables
#   and columns to be the same as SQL name.
# -------------------------------------------------------------------

torque.project = kfs
#
# the module and tag to check out from SVN for satellite updates
# these are to be used by a Satellite DBA for automating the refresh of the database
# 
svnroot=https://test.kuali.org/svn/
svn.module=rice-cfg-dbs
svn.base=branches/rice-release-0-9-4-br
#
# the directory from which to read/write database XML files
#
torque.schema.dir=../../${svn.module}
torque.sql.dir=${torque.schema.dir}/sql
#
# where to find JDBC drivers
#
drivers.directory = ../../../drivers
drivers.file.pattern=ojdbc*.jar,mysql*.jar

#
# Modify these to match the database into which you are going to import
#

import.torque.database = ${import.torque.database}
import.torque.database.driver = ${import.torque.database.driver}
import.torque.database.url = ${rice.import.torque.database.url}
import.torque.database.user=${rice.import.torque.database.user}
import.torque.database.schema=${rice.import.torque.database.schema}
import.torque.database.password=${rice.import.torque.database.password}


# uncomment this to skip some of the larger (and mostly unnecessary) tables in the system
# import.exclude.data.pattern=LD_LDGR_ENTR_T.xml,GL_BALANCE_T.xml,GL_ENTRY_T.xml,LD_LDGR_BAL_T.xml,GL_ACCT_BALANCES_T.xml


# set if you want to use the ant script to set up the users and schemas for the import
# see build.properties for the commands that will be executed
import.admin.user=${rice.import.admin.user}
import.admin.password=${rice.import.admin.password}

# this may need to be different if (like in the case of MySQL) there is a schema name on the URL
# admin commands will not run with that URL if the schema has not yet been created
import.admin.url =  ${rice.import.admin.url}

# these are used by the bootstrapping mechanism
oracle.usermaint.user=${rice.oracle.usermaint.user}
oracle.usermaint.password=${rice.oracle.usermaint.password}

# SQL statements used for creating and dropping users
# 
# THESE SHOULD NOT NEED TO BE MODIFIED 

# Oracle commands

oracle.drop.user.commands=DECLARE temp NUMBER; BEGIN temp := ${oracle.usermaint.user}.kuluser_maint_pk.drop_user( '${import.torque.database.user}' ); END;

oracle.create.user.commands=DECLARE temp NUMBER; BEGIN temp := ${oracle.usermaint.user}.kuluser_maint_pk.create_user( '${import.torque.database.user}', '${import.torque.database.password}' ); END;

oracle.empty.schema.commands=DECLARE temp NUMBER; BEGIN temp := ${oracle.usermaint.user}.kuluser_maint_pk.recreate_user( '${import.torque.database.user}' ); END;

# MySQL commands

mysql.create.user.command=CREATE USER '${import.torque.database.user}'@'localhost' IDENTIFIED BY '${import.torque.database.password}'

mysql.grant.command=GRANT ALL ON ${import.torque.database.schema}.* TO '${import.torque.database.user}'@'localhost' WITH GRANT OPTION

mysql.create.user.commands=${mysql.create.user.command}    
    
mysql.create.schema.commands=CREATE DATABASE IF NOT EXISTS ${import.torque.database.schema} DEFAULT CHARACTER SET 'utf8' DEFAULT COLLATE 'utf8_bin'\n\
/\n\
${mysql.grant.command}

mysql.drop.schema.commands=DROP DATABASE IF EXISTS ${import.torque.database.schema}

