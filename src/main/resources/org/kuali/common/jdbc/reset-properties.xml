<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright 2010-2013 The Kuali Foundation

  Licensed under the Educational Community License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.opensource.org/licenses/ecl2.php

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

  <!--
    This is a work in progress. Does not actually work yet. Needs work.
    The idea here is that each "project" has knowledge about the order in which to load properties for itself.
    By combining a Properties object with a Project object into a ProjectPropertiesContext object we give clients
    the information they need to aggregate properties from a bunch of different contexts and order them however they need to.
    By scanning for objects of type "ProjectPropertiesContext" we can get an aggregate list of all
    properties for all contexts, along with a Project object that will inform us what the properties are for.
    We can then order things accordingly and create a PropertySource object such that all placeholders in all contexts
    will auto-resolve without ever having a <context:property-placeholder> entry in them.
    That's the idea anyway, we'll see how it turns out.
  -->

  <bean id="jdbc.projectPropertiesContext" class="org.kuali.common.util.ProjectPropertiesContext">
    <property name="project">
      <bean class="org.kuali.common.util.spring.ProjectFactoryBean">
        <property name="gav" value="${project.groupId}:${project.artifactId}" />
      </bean>
    </property>
    <property name="properties">
      <bean class="org.kuali.common.util.spring.PropertiesCombinerFactoryBean">
        <property name="listOfProperties">
          <list>
            <util:properties location="classpath:org/kuali/common/jdbc/jdbc.properties" />
            <util:properties location="classpath:org/kuali/common/jdbc/service.properties" />
            <util:properties location="classpath:org/kuali/common/sql/sql.xml" />
            <util:properties location="classpath:org/kuali/common/sql/mysql.xml" />
            <util:properties location="classpath:org/kuali/common/sql/oracle.xml" />
            <util:properties location="classpath:org/kuali/common/sql/h2.xml" />
            <util:properties location="classpath:org/kuali/common/sql/derby.xml" />
          </list>
        </property>
      </bean>
    </property>
  </bean>
</beans>
