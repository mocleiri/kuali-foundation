<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2009 The Kuali Foundation Licensed under the Educational Community
  License, Version 2.0 (the "License"); you may not use this file except in
  compliance with the License. You may obtain a copy of the License at
  http://www.osedu.org/licenses/ECL-2.0 Unless required by applicable law or
  agreed to in writing, software distributed under the License is distributed
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  express or implied. See the License for the specific language governing
  permissions and limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.kuali</groupId>
    <artifactId>kuali-common</artifactId>
    <version>15</version>
  </parent>
  <artifactId>deploy</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>Kuali Application Deployment</name>
  <description>
    This POM makes use of the maven-exec-plugin to deploy live instances of Kuali Applications to
    environments on EC2. Any config files needed for an environment
    are automatically generated and copied over. The database is reset using Impex data.
    The steps it follows are:
    1 - Stop the remote Tomcat instance
    2 - Remove the directory on the remote server containing the old unpacked WAR file
    3 - Generate config files appropriate for the target environment
    4 - Copy config files into the environment
    5 - Copy a new WAR file into the environment
    6 - Reset the remote database
    7 - Perform any cleanup necessary (by default, it removes the old Tomcat logs and the old Tomcat "work" directory)
    8 - Restart the remote Tomcat instance
  </description>
  <repositories>
    <repository>
      <id>kuali.nexus</id>
      <name>Nexus Repository Manager</name>
      <url>http://nexus.kuali.org/content/groups/public</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <scm>
    <connection>scm:svn:http://svn.kuali.org/repos/foundation/trunk/deploy</connection>
    <developerConnection>scm:svn:http://svn.kuali.org/repos/foundation/trunk/deploy</developerConnection>
    <url>http://svn.kuali.org/repos/foundation/trunk/deploy</url>
  </scm>
  <properties>
    <kuali.testjar.phase>none</kuali.testjar.phase>
    <deploy.groupId>org.kuali.rice</deploy.groupId>
    <deploy.artifactId>rice-sampleapp</deploy.artifactId>
    <deploy.version>2.0.0-m7-SNAPSHOT</deploy.version>
    <deploy.packaging>war</deploy.packaging>
    <deploy.filename>ROOT.war</deploy.filename>
    <deploy.repositoryUrl>http://nexus.kuali.org/content/groups/public</deploy.repositoryUrl>
  </properties>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.3</version>
        <executions>
          <execution>
            <id>get</id>
            <phase>package</phase>
            <goals>
              <goal>get</goal>
            </goals>
            <configuration>
              <groupId>${deploy.groupId}</groupId>
              <artifactId>${deploy.artifactId}</artifactId>
              <version>${deploy.version}</version>
              <packaging>${deploy.packaging}</packaging>
              <repositoryUrl>${deploy.repositoryUrl}</repositoryUrl>
              <transitive>false</transitive>
            </configuration>
          </execution>
          <execution>
            <id>copy</id>
            <phase>package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>${deploy.groupId}</groupId>
                  <artifactId>${deploy.artifactId}</artifactId>
                  <version>${deploy.version}</version>
                  <type>${deploy.packaging}</type>
                  <destFileName>${deploy.filename}</destFileName>
                </artifactItem>
              </artifactItems>
              <outputDirectory>${project.build.directory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>